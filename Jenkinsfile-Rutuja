@Library('my-shared-library') _

pipeline{
    
    agent any
    parameters{

        choice(name: 'action', choices: 'create\ndelete', description: 'Choose create/Destroy')
    }
   
    stages{

        stage("Git Checkout"){
                    when { expression {  params.action == 'create' } }    
            steps{
            gitCheckout(
                branch: "main",
                url: "https://github.com/yogesh2188/Devops-project-2023.git"
            )
            }
        }
        stage("Unit Test Maven"){
                when { expression {  params.action == 'create' } }
            steps{
               script{  
                   mvnTest()
               }
            }       
        }
        stage("Integration Test maven"){
            when { expression {  params.action == 'create' } }
            steps{
               script{  
                   mvnIntegrationTest()
               }
            }       
        }
        stage("Static code analysis: Sonarqube"){
            when { expression {  params.action == 'create' } }
            steps{
               script{  
                   def SonarQubecredentialsId = 'sonarqube-api'
                   statiCodeAnalysis(SonarQubecredentialsId)
               }
            }       
        }
        stage('Quality Gate Status Check : Sonarqube'){
         when { expression {  params.action == 'create' } }
            steps{
               script{
                   
                   def SonarQubecredentialsId = 'sonarqube-api'
                   QualityGateStatus(SonarQubecredentialsId)
               }
            }
        }
        stage('Maven Build : maven'){
         when { expression {  params.action == 'create' } }
            steps{
               script{                 
                   mvnBuild()
               }
            }
        }
        stage('Docker Image Build : ECR'){
         when { expression {  params.action == 'create' } }
             steps{
               script{
                   
                   dockerBuild("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
               }
            }
        }
        stage('Docker Image Scan: trivy '){
          when { expression {  params.action == 'create' } }
            steps{
               script{                  
                    dockerImageScan("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
               }
             }
         }
        stage('Docker Image Push : ECR '){
          when { expression {  params.action == 'create' } }
            steps{
               script{
                   
                    sh """
                    aws configure set aws_access_key_id "$ACCESS_KEY"
                    aws configure set aws_secret_access_key "$SECRET_KEY"
                    aws configure set region "${params.Region}"
                    """
                    dockerImagePush("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
               }
            }
        }   
        stage('Docker Image Cleanup : ECR '){
          when { expression {  params.action == 'create' } }
           steps{
              script{             
                    dockerImageCleanup("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
                }
             }
        } 
    }    
}
